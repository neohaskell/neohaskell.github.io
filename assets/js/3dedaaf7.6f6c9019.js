"use strict";(self.webpackChunkneohaskell_github_io=self.webpackChunkneohaskell_github_io||[]).push([[8915],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>h});var a=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=a.createContext({}),m=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=m(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},p=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),d=m(t),p=o,h=d["".concat(i,".").concat(p)]||d[p]||c[p]||r;return t?a.createElement(h,l(l({ref:n},u),{},{components:t})):a.createElement(h,l({ref:n},u))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,l=new Array(r);l[0]=p;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:o,l[1]=s;for(var m=2;m<r;m++)l[m]=t[m];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}p.displayName="MDXCreateElement"},5162:(e,n,t)=>{t.d(n,{Z:()=>l});var a=t(7294),o=t(6010);const r={tabItem:"tabItem_Ymn6"};function l(e){let{children:n,hidden:t,className:l}=e;return a.createElement("div",{role:"tabpanel",className:(0,o.Z)(r.tabItem,l),hidden:t},n)}},4866:(e,n,t)=>{t.d(n,{Z:()=>w});var a=t(7462),o=t(7294),r=t(6010),l=t(2466),s=t(6550),i=t(1980),m=t(7392),u=t(12);function d(e){return function(e){return o.Children.map(e,(e=>{if(!e||(0,o.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:o}}=e;return{value:n,label:t,attributes:a,default:o}}))}function c(e){const{values:n,children:t}=e;return(0,o.useMemo)((()=>{const e=n??d(t);return function(e){const n=(0,m.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function p(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function h(e){let{queryString:n=!1,groupId:t}=e;const a=(0,s.k6)(),r=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,i._X)(r),(0,o.useCallback)((e=>{if(!r)return;const n=new URLSearchParams(a.location.search);n.set(r,e),a.replace({...a.location,search:n.toString()})}),[r,a])]}function g(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,r=c(e),[l,s]=(0,o.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!p({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:r}))),[i,m]=h({queryString:t,groupId:a}),[d,g]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,r]=(0,u.Nk)(t);return[a,(0,o.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:a}),f=(()=>{const e=i??d;return p({value:e,tabValues:r})?e:null})();(0,o.useLayoutEffect)((()=>{f&&s(f)}),[f]);return{selectedValue:l,selectValue:(0,o.useCallback)((e=>{if(!p({value:e,tabValues:r}))throw new Error(`Can't select invalid tab value=${e}`);s(e),m(e),g(e)}),[m,g,r]),tabValues:r}}var f=t(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:n,block:t,selectedValue:s,selectValue:i,tabValues:m}=e;const u=[],{blockElementScrollPositionUntilNextRender:d}=(0,l.o5)(),c=e=>{const n=e.currentTarget,t=u.indexOf(n),a=m[t].value;a!==s&&(d(n),i(a))},p=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=u.indexOf(e.currentTarget)+1;n=u[t]??u[0];break}case"ArrowLeft":{const t=u.indexOf(e.currentTarget)-1;n=u[t]??u[u.length-1];break}}n?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.Z)("tabs",{"tabs--block":t},n)},m.map((e=>{let{value:n,label:t,attributes:l}=e;return o.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===n?0:-1,"aria-selected":s===n,key:n,ref:e=>u.push(e),onKeyDown:p,onClick:c},l,{className:(0,r.Z)("tabs__item",k.tabItem,l?.className,{"tabs__item--active":s===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;const r=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=r.find((e=>e.props.value===a));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},r.map(((e,n)=>(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function y(e){const n=g(e);return o.createElement("div",{className:(0,r.Z)("tabs-container",k.tabList)},o.createElement(b,(0,a.Z)({},e,n)),o.createElement(v,(0,a.Z)({},e,n)))}function w(e){const n=(0,f.Z)();return o.createElement(y,(0,a.Z)({key:String(n)},e))}},165:(e,n,t)=>{t.d(n,{Z:()=>o});var a=t(7294);const o=e=>{let{issue:n,absolute:t}=e;const[o,r]=a.useState("loading"),[l,s]=a.useState();(0,a.useEffect)((()=>{try{fetch(`https://api.github.com/repos/neohaskell/neohaskell/issues/${n}`).then((e=>e.json())).then((e=>{e&&(r(e.state),s(e.title))}))}catch(e){console.error(e)}}),[]);const i=o?`NOT IMPLEMENTED YET: #${n} - ${l}`:"LOADING",m=`tooltip ${t?"absolute z-10 p-4":""}`;return a.createElement("a",{className:m,"data-tip":i,target:"_blank",href:`https://github.com/neohaskell/neohaskell/issues/${n}`},a.createElement("div",{className:`badge border-black ${{open:"badge-warning",closed:"hidden",loading:"badge-primary"}[o]} badge-lg`}))}},1353:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>c,frontMatter:()=>r,metadata:()=>s,toc:()=>m});var a=t(7462),o=(t(7294),t(3905));t(4866),t(5162),t(165);const r={sidebar_position:0},l="Building Command-Line Interfaces",s={unversionedId:"modules/command-parsing",id:"modules/command-parsing",title:"Building Command-Line Interfaces",description:"Most programs we write do something. And a lot of the time, we want to ask the user what they want to do \u2014 maybe by passing a name, setting a path, or toggling a feature on or off.",source:"@site/docs/modules/command-parsing.mdx",sourceDirName:"modules",slug:"/modules/command-parsing",permalink:"/docs/modules/command-parsing",draft:!1,editUrl:"https://github.com/neohaskell/neohaskell.github.io/tree/main/docs/modules/command-parsing.mdx",tags:[],version:"current",sidebarPosition:0,frontMatter:{sidebar_position:0},sidebar:"tutorialSidebar",previous:{title:"Core Modules",permalink:"/docs/category/core-modules"},next:{title:"Extra Topics",permalink:"/docs/category/extra-topics"}},i={},m=[{value:"A Simple CLI: Hello, Whoever You Are!",id:"a-simple-cli-hello-whoever-you-are",level:2},{value:"Multiple Commands",id:"multiple-commands",level:2},{value:"Handling the Commands",id:"handling-the-commands",level:2}],u={toc:m},d="wrapper";function c(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,a.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"building-command-line-interfaces"},"Building Command-Line Interfaces"),(0,o.kt)("p",null,"Most programs we write do something. And a lot of the time, we want to ",(0,o.kt)("strong",{parentName:"p"},"ask the user what they want to do")," \u2014 maybe by passing a name, setting a path, or toggling a feature on or off."),(0,o.kt)("p",null,"That\u2019s where NeoHaskell\u2019s command-line parser comes in. It's clean, safe, and easy to use \u2014 and integrates perfectly with the rest of your application."),(0,o.kt)("p",null,"You describe what arguments you want, and NeoHaskell builds a structured object for you, automatically."),(0,o.kt)("p",null,"Let\u2019s see how."),(0,o.kt)("h2",{id:"a-simple-cli-hello-whoever-you-are"},"A Simple CLI: Hello, Whoever You Are!"),(0,o.kt)("p",null,"Imagine we\u2019re writing a small tool. It greets someone. The user can give us their name, and ask us to shout it."),(0,o.kt)("p",null,"Here\u2019s how we describe that in NeoHaskell."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"data GreetCommand = GreetCommand\n  { name :: Text,\n    isShouting :: Bool\n  }\n")),(0,o.kt)("p",null,"That\u2019s our data. A name (",(0,o.kt)("inlineCode",{parentName:"p"},"Text"),") and whether to shout (",(0,o.kt)("inlineCode",{parentName:"p"},"Bool"),")."),(0,o.kt)("p",null,"Now the command parser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'import Command qualified\n\ngreetParser : Command.OptionsParser GreetCommand\ngreetParser = do\n  parsedName <- Command.text\n            { help = "Name of the person to greet",\n              long = "name",\n              short = \'n\',\n              metavar = "NAME",\n              value = Nothing\n            }\n  parsedShout <- Command.flag\n                  { help = "Whether to shout the greeting",\n                    long = "shout",\n                    short = \'s\',\n                    value = Nothing\n                  }\n  GreetCommand { name = parsedName, isShouting = parsedShout }\n    |> Command.yield\n')),(0,o.kt)("p",null,"So far, so good."),(0,o.kt)("p",null,"We just defined how to convert a few flags into something meaningful:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},'GreetCommand { name = "Alice", isShouting = True }')),(0,o.kt)("p",null,"Now, we'd need a function to know how to run this command. We usually call these ",(0,o.kt)("em",{parentName:"p"},"handlers"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hs"},"handleCommand : GreetCommand -> Task Text Unit\nhandleCommand GreetCommand{name, isShouting} = do\n  let baseGreeting = [fmt|Hello, {name}!|]\n  let greeting =\n        if isShouting then\n          baseGreeting |> Text.toUpper\n        else\n          baseGreeting\n  Console.print greeting\n")),(0,o.kt)("p",null,"Afterwards, we'd need to modify our ",(0,o.kt)("inlineCode",{parentName:"p"},"run")," function in order to parse the command and call the handler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-hs"},"run : Task Text Unit\n  cmd <- Command.parseHandler greetParser\n\n  let onError err = [fmt|Oops, an error has occurred{e}|]\n  handleCommand cmd\n    |> Task.mapError onError\n")),(0,o.kt)("p",null,"Try running the code with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$ neo run -- --name Alice --isShouting\n")),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"When running code with ",(0,o.kt)("inlineCode",{parentName:"p"},"neo run"),", if your program receives command line arguments, you should write them\nafter two dashes like above. If not, ",(0,o.kt)("inlineCode",{parentName:"p"},"neo")," will think that you are passing those to it.")),(0,o.kt)("h2",{id:"multiple-commands"},"Multiple Commands"),(0,o.kt)("p",null,"Sometimes, you want more than one thing your program can do. Like ",(0,o.kt)("inlineCode",{parentName:"p"},"greet"),", but also ",(0,o.kt)("inlineCode",{parentName:"p"},"wave")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"thank"),"."),(0,o.kt)("p",null,"You can define a data type that lists all possible commands:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"data Command\n  = Greet GreetCommand\n  | Wave WaveCommand\n  | Thank ThankCommand\n")),(0,o.kt)("p",null,"Each command has its own record:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"data GreetCommand = GreetCommand\n  { name :: Text,\n    isShouting :: Bool\n  }\n\ndata WaveCommand = WaveCommand\n  { emoji :: Text\n  }\n\ndata ThankCommand = ThankCommand\n  { name :: Text\n  }\n")),(0,o.kt)("p",null,"Now, let\u2019s write a parser for each one."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'greet : Command.CommandOptions Command\ngreet =\n  { name = "greet",\n    description = "say hello",\n    version = Nothing,\n    decoder = do\n      name <- Command.text\n        { help = "Who to greet",\n          long = "name",\n          short = \'n\',\n          metavar = "NAME",\n          value = Nothing\n        }\n      isShouting <- Command.flag\n        { help = "Whether to shout",\n          long = "shout",\n          short = \'s\',\n          value = Nothing\n        }\n\n      -- Protip! If there\'s a variable in scope with the same name as the record field,\n      -- you don\'t have to assign it. NeoHaskell will do it for you!\n      GreetCommand { name, isShouting }\n        |> Greet   -- Note how we\'re wrapping the type GreetCommand\n                   -- into the Greet branch of the Command enum.\n        |> Command.yield\n  }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'wave : Command.CommandOptions Command\nwave =\n  { name = "wave",\n    description = "wave silently",\n    version = Nothing,\n    decoder = do\n      emoji <- Command.text\n        { help = "Which emoji to use",\n          long = "emoji",\n          short = \'e\',\n          metavar = "EMOJI",\n          value = Just "\ud83d\udc4b"\n        }\n      WaveCommand { emoji }\n        |> Wave   -- Same here\n        |> Command.yield\n  }\n')),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'thank : Command.CommandOptions Command\nthank =\n  { name = "thank",\n    description = "thank someone",\n    version = Nothing,\n    decoder = do\n      name <- Command.text\n        { help = "Who to thank",\n          long = "name",\n          short = \'n\',\n          metavar = "NAME",\n          value = Nothing\n        }\n      ThankCommand { name }\n        |> Thank\n        |> Command.yield\n  }\n')),(0,o.kt)("p",null,"Now combine them into a single parser:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},"allCommands : Command.OptionsParser Command\nallCommands =\n  Command.commands [greet, wave, thank]\n")),(0,o.kt)("p",null,"And finally run it:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'main : Task Text Unit\nmain = do\n  userCommand <- Command.parseHandler\n    { name = "hello-cli",\n      description = "A friendly assistant",\n      version = Just [version|1.0.0|],\n      decoder = allCommands\n    }\n  let onError e = [fmt|Oops, something went wrong: {e}|])\n  handle userCommand\n    |> Task.mapError onError\n')),(0,o.kt)("h2",{id:"handling-the-commands"},"Handling the Commands"),(0,o.kt)("p",null,"Once you've parsed a command, you can handle it however you want:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-haskell"},'handle : Command -> Task Text Unit\nhandle command =\n  case command of\n    Greet GreetCommand{name, isShouting} -> do\n      let baseGreeting = [fmt|Hello, {name}!|]\n      let greeting =\n            if isShouting then\n              baseGreeting |> Text.toUpper\n            else\n              baseGreeting\n      Console.print greeting\n\n    Wave WaveCommand{emoji} ->\n      Console.print emoji\n\n    Thank ThankCommand{name} ->\n      Console.print [fmt|"Thanks, {name}!"|]\n')),(0,o.kt)("p",null,"And that\u2019s it! Now your CLI supports multiple commands, each with its own set of options, and a clean entrypoint to handle them."))}c.isMDXComponent=!0}}]);